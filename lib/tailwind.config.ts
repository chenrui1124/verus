import type { Config } from 'tailwindcss'
import type { CSSInJS } from 'mm3'

import { addDynamicIconSelectors } from '@iconify/tailwind'
import { themeReducer } from 'mm3'
import plugin from 'tailwindcss/plugin'

/*
.........:::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::..
.......:::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::....
....:::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::.......
..:::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::.........
::::::::::::............:::::::::::::.............::::::::::::............:::::::::::::............
::::::::::............:::::::::::::............:::::::::::::............:::::::::::::............::
:::::::............:::::::::::::............:::::::::::::............:::::::::::::............:::::
:::::............:::::::::::::............:::::::::::::............:::::::::::::............:::::::
::............:::::::::::::............:::::::::::::............:::::::::::::............::::::::::
............:::::::::::::............:::::::::::::............:::::::::::::............::::::::::::
.........:::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::..
.......:::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::....
....:::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::.......
..:::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::.........
::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::............
*/

const vColors = {
  bsc: ['255, 255, 255', '28, 27, 30'],
  'on-bsc': ['25, 25, 30', '240, 240, 245'],

  pri: ['0, 94, 177', '166, 200, 255'],
  'on-pri': ['255, 255, 255', '0, 48, 96'],

  err: ['152, 64, 97', '255, 177, 200'],
  'on-err': ['255, 255, 255', '94, 17, 51'],
  'err-ctr': ['255, 217, 226', '123, 41, 73'],
  'on-err-ctr': ['62, 0, 29', '255, 217, 226'],

  otl: ['148, 143, 153', '122, 117, 127'],

  dis: ['200, 200, 200', '80, 80, 80']
}

type VColors = keyof typeof vColors

const toVar = (v: VColors) => `--color-${v}`

const theme = {
  opacity: {
    0: '0',
    v1: '0.08',
    v2: '0.12',
    v3: '0.48',
    100: '1'
  },
  borderRadius: {
    inherit: 'inherit',
    none: '0',
    v1: '0.25rem',
    v2: '0.5rem',
    v3: '0.75rem',
    full: '9999px'
  },
  colors: ({ colors }) => ({
    black: colors.black,
    white: colors.white,
    inherit: colors.inherit,
    current: colors.current,
    transparent: colors.transparent,
    ...themeReducer(
      Object.keys(vColors),
      name => `rgba(var(${toVar(<VColors>name)}), <alpha-value>)`
    )
  }),
  extend: {
    transitionTimingFunction: {
      braking: 'cubic-bezier(0.36, 0.72, 0, 1)'
    },
    height: ({ theme }) => ({
      v1: theme('spacing.7'),
      v2: theme('spacing.10'),
      v3: theme('spacing.12')
    })
  }
} satisfies Config['theme']

const base = {
  '::before, ::after': {
    '--tw-content': `''`
  },
  ':root': Object.keys(vColors).reduce<Record<string, string>>((vars, v) => {
    vars[toVar(<VColors>v)] = vColors[<VColors>v][0]
    return vars
  }, {}),
  ':root:is(.dark)': Object.keys(vColors).reduce<Record<string, string>>((vars, v) => {
    vars[toVar(<VColors>v)] = vColors[<VColors>v][1]
    return vars
  }, {})
} satisfies CSSInJS

const utilities = (theme => ({
  '.v-outline': {
    outline: `2px solid rgba(var(${toVar('pri')}), ${theme('opacity.v3')})`,
    outlineOffset: '2px'
  },
  '.v-outline-danger': {
    outline: `2px solid rgba(var(${toVar('err')}), ${theme('opacity.v3')})`,
    outlineOffset: '2px'
  },
  '.v-disabled': {
    opacity: theme('opacity.v3'),
    pointerEvents: 'none'
  }
})) satisfies (theme: (path: string) => string) => CSSInJS

const components = {
  '.v-shade': {
    position: 'absolute',
    inset: '0',
    pointerEvents: 'none',
    borderRadius: 'inherit'
  }
} satisfies CSSInJS

const variants = [
  ['hover&focus', ['&:hover', '&:focus']],
  ['before&after', ['&:before', '&:after']]
] satisfies [string, string[]][]

/*
.........:::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::..
.......:::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::....
....:::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::.......
..:::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::.........
::::::::::::............:::::::::::::.............::::::::::::............:::::::::::::............
::::::::::............:::::::::::::............:::::::::::::............:::::::::::::............::
:::::::............:::::::::::::............:::::::::::::............:::::::::::::............:::::
:::::............:::::::::::::............:::::::::::::............:::::::::::::............:::::::
::............:::::::::::::............:::::::::::::............:::::::::::::............::::::::::
............:::::::::::::............:::::::::::::............:::::::::::::............::::::::::::
.........:::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::..
.......:::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::....
....:::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::.......
..:::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::.........
::::::::::::............:::::::::::::............:::::::::::::............:::::::::::::............
*/

export default {
  content: ['**/*.{vue,ts,tsx}'],

  theme,

  plugins: [
    addDynamicIconSelectors({ prefix: 'i' }),
    plugin(({ addBase, addUtilities, addVariant, addComponents, theme }) => {
      addBase(base)
      addUtilities(utilities(theme))
      addComponents(components)
      variants.forEach(arg => addVariant(...arg))
    })
  ],

  corePlugins: { preflight: false }
} satisfies Config
